apply plugin: 'java' // Adds Java compilation, testing and bundling capabilities to a project. It serves as the basis for many of the other Gradle plugins. See also Chapter 7, Java Quickstart.
                     // Auto applies java-base

// Integration plugins
//apply plugin: 'application' // Adds tasks for running and bundling a Java project as a command-line application.
                            // Auto applies java
//apply plugin: 'ear' // Adds support for building J2EE applications.
                    // Works with java

//apply plugin: 'jetty' // Deploys your web application to a Jetty web container embedded in the build. See also Chapter 10, Web Application Quickstart.
                      // Auto applies war

apply plugin: 'maven' // Adds support for publishing artifacts to Maven repositories.
                      // Works with java, war

//apply plugin: 'war' // Adds support for assembling web application WAR files. See also Chapter 10, Web Application Quickstart.
                    // Auto applies java


// Software Development Plugins - provides help with your software development process
//apply plugin: 'announce' // Publish messages to your favourite platforms, such as Twitter or Growl.

//apply plugin: 'build-announcements' // Sends local announcements to your desktop about interesting events in the build lifecycle.
                                    // Auto applies announce

//apply plugin: 'checkstyle' // Performs quality checks on your project's Java source files using Checkstyle and generates reports from these checks.
                           // Auto applies java-base

//apply plugin: 'findbugs' // Performs quality checks on your project's Java source files using FindBugs and generates reports from these checks.
                         // Auto applies java-base

apply plugin: 'idea' // Generates files that are used by Intellij IDEA IDE, thus making it possible to import the project into IDEA.
                     // Works with java

//apply plugin: 'jdepend' // Performs quality checks on your project's source files using JDepend and generates reports from these checks.
                        // Auto applies java-base

//apply plugin: 'pmd' // Performs quality checks on your project's Java source files using PMD and generates reports from these checks.
                    // Auto applies java-base

apply plugin: 'project-report' // Generates reports containing useful information about your Gradle build.
                               // Auto applies reporting-base

//apply plugin: 'signing' // Adds the ability to digitally sign built files and artifacts.
                        // Auto applies base

//apply plugin: 'sonar' // Provides integration with the Sonar code quality platform. Superceeded by the sonar-runner plugin.
                      // Works with java-base, java, jacoco

// Incubating Software Development Plugins
//apply plugin: 'build-dashboard' // Generates build dashboard report.
                                // Auto applies reporting-base

apply plugin: 'build-init' // Adds support for initializing a new Gradle build. Handles converting a Maven build to a Gradle build.
                           // Auto applies wrapper

//apply plugin: 'jacoco' // Provides integration with the JaCoCo code coverage library for Java.
                       // Auto applies reporting-base
                       // Works with java

//apply plugin: 'sonar-runner' // Provides integration with the Sonar code quality platform. Supersedes the sonar plugin.
                             // Works with java-base, java, jacoco

//apply plugin: 'wrapper' // Adds a Wrapper task for generating Gradle wrapper files.



// Base Plugins

apply plugin: 'base' // Adds the standard lifecycle tasks and configures reasonable defaults for the archive tasks:
                     // adds build ConfigurationName tasks. Those tasks assemble the artifacts belonging to the specified configuration.
                     // adds upload ConfigurationName tasks. Those tasks assemble and upload the artifacts belonging to the specified configuration.
                     // configures reasonable default values for all archive tasks (e.g. tasks that inherit from AbstractArchiveTask). For example, the archive tasks are tasks of types: Jar, Tar, Zip. Specifically, destinationDir, baseName and version properties of the archive tasks are preconfigured with defaults. This is extremely useful because it drives consistency across projects; the consistency regarding naming conventions of archives and their location after the build completed.

//apply plugin: 'java-base' // Adds the source sets concept to the project. Does not add any particular source sets.

//apply plugin: 'reporting-base' // Adds some shared convention properties to the project, relating to report generation.


// Third Party Plugins
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Project Details

project.description = "This project is developed as progress is made reading through the Test-Driven book by Lasse Koskela."
project.group = "net.maynard.examples"
project.version = 0.3

ext {
    encoding = "UTF-8"
    hamcrestVersion = "1.3+"
    jdkSource = "1.7"
    junitVersion = "4.12+"
}

printInfo()


sourceSets.all { ext.purpose = null }

sourceSets {
    main {
        purpose = "development"
    }
    test {
        purpose = "test"
    }
    plugin {
        purpose = "production"
    }
}

sourceCompatibility = jdkSource
targetCompatibility = jdkSource
[compileJava, compileTestJava]*.options*.encoding = encoding

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenLocal()
//    maven { url "https://artifactory.agile.pragmatics.com/artifactory/repo" }
//    maven { url "https://cache.agile.pragmatics.com/artifactory/repo" }
//    maven { url "http://jsptest.sf.net/maven2/" } //Valid
//    maven { url "http://download.java.net/maven/2/" } //Valid
//    maven { url "http://download.java.net/maven/1/" } //Valid
//    maven { url "http://people.apache.org/repo/m2-snapshot-repository" } //Valid, but limited
//    maven { url "http://people.apache.org/repo/m2-incubating-repository" } //Valid, but limited
//    maven { url "http://www.laughingpanda.org/maven2/" } //Invaliud
    maven {
        url "http://repo1.maven.org/maven"
    }
    mavenCentral()

    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'gsbase', name: 'gsbase', version: "2.0.1"
    compile group: 'org.hamcrest', name: 'hamcrest-core', version: hamcrestVersion
    compile group: 'org.hamcrest', name: 'hamcrest-library', version: hamcrestVersion

    // From Author's Source:
    compile(group: 'org.apache.velocity', name: 'velocity', version:'1.7') {
        exclude(module: 'commons-lang')
    }
    compile(group: 'org.apache.wicket', name: 'wicket', version:'7.0.0-M5') {
        exclude(module: 'commons-lang')
    }
    compile(group: 'org.apache.wicket', name: 'wicket-spring-annot', version:'1.3.7') {
        exclude(module: 'commons-lang')
    }
    compile group: 'org.easymock', name: 'easymock', version:'3.3.1'
    compile group: 'org.easymock', name: 'easymockclassextension', version:'3.2'
    compile group: 'org.slf4j', name: 'slf4j-simple', version:'1.7.10'
    compile group: 'commons-dbcp', name: 'commons-dbcp', version:'1.4'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.6'
    compile(group: 'org.hibernate', name: 'hibernate', version:'3.5.4-Final') {
        exclude(module: 'jta')
    }
    compile group: 'geronimo-spec', name: 'geronimo-spec-jta', version:'1.0.1B-rc4'
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version:'4.3.8.Final'
    compile group: 'javax.ejb', name: 'ejb-api', version:'3.0'
    compile group: 'javax.persistence', name: 'persistence-api', version:'1.0.2'
    compile group: 'javax.annotation', name: 'jsr250-api', version:'1.0'
    compile group: 'org.hibernate', name: 'hibernate-commons-annotations', version:'3.2.0.Final'
    compile(group: 'org.mockejb', name: 'mockejb', version:'0.6-beta2') {
        exclude(module: 'cglib-full')
    }
    compile group: 'mockobjects', name: 'mockobjects-core', version:'0.09'
    compile group: 'mockobjects', name: 'mockobjects-jdk1.4-j2ee1.3', version:'0.09'
    compile group: 'mockobjects', name: 'mockobjects-jdk1.4', version:'0.09'
    compile group: 'org.springframework', name: 'spring-mock', version:'2.0.8'
    compile(group: 'org.apache.activemq', name: 'activemq-core', version:'5.7.0') {
        exclude(module: 'commons-lang')
    }
    compile group: 'hsqldb', name: 'hsqldb', version:'1.8.0.10'
    compile group: 'org.netbeans', name: 'jemmy', version:'2.2.7.5'
    compile group: 'abbot', name: 'abbot', version:'0.12.3'
    compile group: 'gnu-regexp', name: 'gnu-regexp', version:'1.1.4'
    compile(group: 'org.dbunit', name: 'dbunit', version:'2.5.0') {
        exclude(module: 'commons-lang')
    }
    compile(group: 'net.sourceforge.jwebunit', name: 'jwebunit-htmlunit-plugin', version:'3.2') {
        exclude(module: 'commons-lang')
    }
    compile group: 'net.sf.jsptest', name: 'jsptest-jsp20', version:'0.19'
    compile group: 'com.c2.fit', name: 'fit', version:'1.1'
    compile group: 'org.fitnesse', name: 'fitlibrary', version:'20060719'
    compile group: 'org.fitnesse', name: 'fitnesse', version:'20150226'
    compile group: 'com.github.lkoskela', name: 'beaninject', version:'0.9'
}

// Custom Tasks

task printProperties << {
    println encoding
    println jdkSource
    sourceSets.matching { it.purpose == "production"}.each { println it.name}
}

// Methods

void printInfo() {
    println()
    println "Project: " + getProject().getName()
    println "Version: " + getProject().getVersion()
    println()
}
